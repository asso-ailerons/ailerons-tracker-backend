"""Base schema

Revision ID: 1d7dc5d9c32d
Revises:
Create Date: 2025-10-20 12:00:49.237941

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "1d7dc5d9c32d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "individual",
        sa.Column(
            "id", sa.BIGINT(), sa.Identity(always=False, start=1), nullable=False
        ),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("common_name", sa.Text(), nullable=False),
        sa.Column("binomial_name", sa.Text(), nullable=False),
        sa.Column("individual_name", sa.Text(), nullable=False),
        sa.Column("sex", sa.Text(), nullable=False),
        sa.Column("description", sa.Text(), nullable=False),
        sa.Column(
            "feature_collection", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("individual_name"),
    )
    op.create_table(
        "context",
        sa.Column("id", sa.BIGINT(), sa.Identity(always=True, start=1), nullable=False),
        sa.Column("date", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("individual_id", sa.BIGINT(), nullable=False),
        sa.Column("situation", sa.Text(), nullable=False),
        sa.Column("size", sa.BIGINT(), nullable=False),
        sa.Column("behavior", sa.Text(), nullable=False),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "csv",
        sa.Column("uuid", sa.UUID(), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("loc_file", sa.Text(), nullable=False),
        sa.Column("depth_file", sa.Text(), nullable=False),
        sa.Column("individual_id", sa.BIGINT(), nullable=False),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.id"],
        ),
        sa.PrimaryKeyConstraint("uuid"),
        sa.UniqueConstraint("uuid"),
    )
    op.create_table(
        "line_geojson",
        sa.Column("id", sa.BIGINT(), sa.Identity(always=True, start=1), nullable=False),
        sa.Column("individual_id", sa.BIGINT(), nullable=False),
        sa.Column("geojson", postgresql.JSON(astext_type=sa.Text()), nullable=False),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "picture",
        sa.Column("id", sa.BIGINT(), sa.Identity(always=True, start=1), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("url", sa.Text(), nullable=False),
        sa.Column("individual_id", sa.BIGINT(), nullable=False),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    op.create_table(
        "record",
        sa.Column("id", sa.BIGINT(), sa.Identity(always=True, start=1), nullable=False),
        sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("latitude", sa.FLOAT(), nullable=False),
        sa.Column("longitude", sa.FLOAT(), nullable=False),
        sa.Column(
            "point_feature", postgresql.JSON(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("depth", sa.Integer(), nullable=True),
        sa.Column("csv_uuid", sa.Uuid(), nullable=False),
        sa.Column("individual_id", sa.BIGINT(), nullable=False),
        sa.Column("record_timestamp", postgresql.TIMESTAMP(), nullable=False),
        sa.ForeignKeyConstraint(
            ["csv_uuid"],
            ["csv.uuid"],
        ),
        sa.ForeignKeyConstraint(
            ["individual_id"],
            ["individual.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("record")
    op.drop_table("picture")
    op.drop_table("line_geojson")
    op.drop_table("csv")
    op.drop_table("context")
    op.drop_table("individual")
    # ### end Alembic commands ###
